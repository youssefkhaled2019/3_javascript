Functions
    - A JavaScript function is a block of JavaScript code, that can be executed when "called" for.
    - For example, a function can be called when an event occurs, like when the user clicks a button.
    - You can place any number of scripts in an HTML document.
    - Scripts can be placed in the <body>, or in the <head> section of an HTML page, or in both.
    - Placing scripts at the bottom of the <body> element improves the display speed, because script interpretation slows down the display.
--------------------------------------------------------------------------------------------------------------------
External JavaScript Advantages  // <script src="myScript1.js"></script>
   -Placing scripts in external files has some advantages:
        -It separates HTML and code
        -It makes HTML and JavaScript easier to read and maintain
        -Cached JavaScript files can speed up page loads
--------------------------------------------------------------------------------------------------------------------
semicolons
  - On the web, you might see examples without semicolons.
  - Ending statements with semicolon is not required, but highly recommended
--------------------------------------------------------------------------------------------------------------------
A JavaScript name must begin with:
    A letter (A-Z or a-z)
    A dollar sign ($)
    Or an underscore (_)

JavaScript and Camel Case
  -Historically, programmers have used different ways of joining multiple words into one variable name:
    -Hyphens: first-name, last-name, master-card, inter-city. // Hyphens are not allowed in JavaScript. They are reserved for subtractions.
    -Underscore: first_name, last_name, master_card, inter_city.
    -Upper Camel Case (Pascal Case):FirstName, LastName, MasterCard, InterCity.
    -Lower Camel Case: firstName, lastName, masterCard, interCity.  <----- //JavaScript programmers tend to use camel case that starts with a lowercase letter

JavaScript Character Set
  JavaScript uses the [Unicode] character set.
  Unicode covers (almost) all the characters, punctuations, and symbols in the world.
  For a closer look, please study our Complete Unicode Reference. ->> //https://www.w3schools.com/charsets/ref_html_utf8.asp

--------------------------------------------------------------------------------------------------------------------
The JavaScript syntax defines two types of values:
    Fixed values
       -Fixed values are called Literals.
    Variable values
       -Variable values are called Variables.  

declare    =>   var, let and const
equal sign =>  x=3




Types of JavaScript Operators
  There are different types of JavaScript operators:
    -Arithmetic Operators  ( +, -, * ,/ , % ), ** Exponentiation , ++ Increment , -- Decrement
    -Assignment Operators   ( =,+=,-=,*=,/=,%=,**=,, )
    -Comparison Operators (== ,===,!=,!==,>,<,>=,<=,?,) # ? 	ternary operator
    -String Operators
    -Logical Operators  (&&,||,!) 
    -Bitwise Operators  (&,|,~,^,<<,>>,>>>)
    -Ternary Operators
    -Type Operators    (typeof,
                        instanceof  #Returns true if an object is an instance of an object type )




Datatypes
  -JavaScript has 8 Datatypes
    String
    Number
    Bigint
    Boolean
    Undefined
    Null
    Symbol
    Object
  
  -The Object Datatype
      The object data type can contain both [built-in objects], and [user defined objects]:
      Built-in object types can be:
            objects, arrays, dates, maps, sets, intarrays, floatarrays, promises, and more.



Function Invocation
  The code inside the function will execute when "something" invokes (calls) the function:
      When an event occurs (when a user clicks a button)
      When it is invoked (called) from JavaScript code
      Automatically (self invoked)


--------------------------------------------------------------------------------------------------------------------

JavaScript Identifiers
    -All JavaScript variables must be identified with unique names.
    -These unique names are called identifiers.
    -Identifiers can be short names (like x and y) or more descriptive names (age, sum, totalVolume).
    -The general rules for constructing names for variables (unique identifiers) are:
        -Names can contain letters, digits, underscores, and dollar signs.
        -Names must begin with a letter.
        -Names can also begin with $ and _ (but we will not use it in this tutorial).
        -Names are case sensitive (y and Y are different variables).
        -Reserved words (like JavaScript keywords) cannot be used as names.

When to Use var, let, or const?
  1. Always declare variables
  2. Always use const if the value should not be changed
  3. Always use const if the type should not be changed (Arrays and Objects)
  4. Only use let if you can't use const
  5. Only use var if you MUST support old browsers.
--------------------------------------------------------------------------------------------------------------------

-If you re-declare a JavaScript variable declared with var, it will not lose its value.
  var carName = "Volvo";
  var carName;  #print -> Volvo

-You cannot re-declare a variable declared with let or const.
   let carName = "Volvo"; #This will not work:
   let carName

-JavaScript had [Global Scope] and [Function Scope.](Block Scope)
   -the two new JavaScript keywords: let and const These two keywords provided Block Scope
                     var                    let - const

-var
  -Variables declared with the var always have [Global Scope.]
      -Variables declared with the var keyword can NOT have block scope:
         -Variables declared with varinside a { } block can be accessed from outside the block:
            ex: {
                  var x = 2;
                } // x CAN be used here
  - Variables defined with var can be [redeclared.]  
     ex-1:  var x = "John Doe";
            var x = 0; 
     ex-2:  
          -Redeclaring a JavaScript var variable is allowed anywhere in a program:
            var x = 2;     // Allowed
            var x = 3;     // Allowed
            x = 4;         // Allowed 

    -Redeclaring a variable using the var keyword can impose problems.      
        -Redeclaring a variable inside a block will also redeclare the variable outside the block:
          ex:   var x = 10;// Here x is 10
                {
                var x = 2;// Here x is 2
                }
                 // Here x is 2 
    -Redeclaring a JavaScript variable with var is allowed anywhere in a program:
                  var x = 2; // Now x is 2
                  var x = 3; // Now x is 3 
  -Variables defined with var are [hoisted] to the top and can be initialized at any time. 
    -Meaning: You can use the variable before it is declared:
        ex: carName = "Volvo";
            var carName;

-Let
  -Variables declared with let have [Block Scope]
    -Variables declared inside a { } block cannot be accessed from outside the block:
       ex:{
              let x = 2;
          }    // x can NOT be used here 
  -Variables declared with let must be [Declared] before use
     ex: carName = "Saab"; #(Hoisting) notallow
         let carName = "Volvo";  [ReferenceError]
  -Variables declared with let cannot be [Redeclared] in the same scope   
     ex: let x = "John Doe";
         let x = 0; # can not be redeclared.
     -Redeclaring a variable using the let keyword can solve this problem.
         -Redeclaring a variable inside a block will not redeclare the variable outside the block:
             ex: let x = 10; // Here x is 10
                {
                let x = 2;// Here x is 2
                }
                // Here x is 10 
     -With let, redeclaring a variable in the same block is NOT allowed:
             ex:  var x = 2;   // Allowed
                  let x = 3;   // Not allowed

                  {
                  let x = 2;   // Allowed
                  let x = 3;   // Not allowed
                  }

                  {
                  let x = 2;   // Allowed
                  var x = 3;   // Not allowed
                  }           
     -Redeclaring a variable with let, in another block, IS allowed:
            ex:   let x = 2;   // Allowed
                  {
                  let x = 3;   // Allowed
                  }

                  {
                  let x = 4;    // Allowed
                  }
  -Variables defined with let are also [hoisted] to the top of the block, but not initialized.
    - Meaning: Using a let variable before it is declared will result in a [ReferenceError]:
         ex:carName = "Saab";
            let carName = "Volvo"; #ReferenceError

-const :It does not define a constant value. It defines a constant reference to a value.
  -Variables defined with const cannot be Redeclared
    -Redeclaring an existing var or let variable to const, in the same scope, is not allowed:
        ex-1:   var x = 2;     // Allowed
              const x = 2;   // Not allowed

              {
              let x = 2;     // Allowed
              const x = 2;   // Not allowed
              }

              {
              const x = 2;   // Allowed
              const x = 2;   // Not allowed
              }
        ex-2: 
           -Redeclaring a variable with const, in another scope, or in another block, is allowed:
              const x = 2;       // Allowed
              {
                const x = 3;   // Allowed
              }

              {
                const x = 4;   // Allowed
              } 
  -Variables defined with const cannot be Reassigned
    - A variable defined with the const keyword cannot be reassigned: 
          ex: const PI = 3.141592653589793;
                    PI = 3.14;      // This will give an error
                    PI = PI + 10;   // This will also give an error 
    - Must be Assigned
          -JavaScript const variables must be assigned a value when they are declared:
                ex-1: const PI = 3.14159265359;  #Correct  

                ex-1:  const PI;
                       PI = 3.14159265359; #Incorrect
    -Reassigning an existing const variable, in the same scope, is not allowed:
        ex:   const x = 2;     // Allowed
              x = 2;           // Not allowed
              var x = 2;       // Not allowed
              let x = 2;       // Not allowed
              const x = 2;     // Not allowed

              {
                const x = 2;   // Allowed
                x = 2;         // Not allowed
                var x = 2;     // Not allowed
                let x = 2;     // Not allowed
                const x = 2;   // Not allowed
              }
  -Variables defined with const have [Block Scope]
     - Declaring a variable with const is similar to let when it comes to Block Scope.
     - The x declared in the block, in this example, is not the same as the x declared outside the block:
            ex: const x = 10; // Here x is 10

                {
                const x = 2;
                // Here x is 2
                }

                // Here x is 10 
  - Hoisting 
    -Variables defined with const are also hoisted to the top, but not initialized.
      -Meaning: Using a const variable before it is declared will result in a [ReferenceError]:
        ex:  alert (carName);
             const carName = "Volvo
             
             -code:
               <p id="demo"></p>
                <script>

                try {
                  alert(carName);
                  const carName = "Volvo";
                }
                catch (err) {
                  document.getElementById("demo").innerHTML = err;
                }
                  </script>
  -Constant Objects and Arrays (important)
    -The keyword const is a little misleading.
    -It does not define a constant value. It defines a constant reference to a value.
    -Because of this you can NOT:
        Reassign a constant value
        Reassign a constant array
        Reassign a constant object
    -But you CAN:
        Change the elements of constant array
        Change the properties of constant object

   - Constant Arrays   
      -You can change the elements of a constant array: 
          ex:
              // You can create a constant array:
              const cars = ["Saab", "Volvo", "BMW"];

              // You can change an element:
              cars[0] = "Toyota";

              // You can add an element:
              cars.push("Audi");

      -But you can NOT reassign the array:
          ex:
           const cars = ["Saab", "Volvo", "BMW"];
           cars = ["Toyota", "Volvo", "Audi"];    // ERROR 
   - Constant Objects
        -You can change the properties of a constant object:
             ex: 
                 // You can create a const object:
                  const car = {type:"Fiat", model:"500", color:"white"};

                  // You can change a property:
                  car.color = "red";

                  // You can add a property:
                  car.owner = "Johnson"; 
        -But you can NOT reassign the object:
           ex: 
              const car = {type:"Fiat", model:"500", color:"white"};
              car = {type:"Volvo", model:"EX60", color:"red"};    // ERROR 



-Difference Between var, let and const
	       Scope	 Redeclare	Reassign	Hoisted	  Binds-this
var	     No	     Yes	      Yes	      Yes	      Yes
let	     Yes	   No	        Yes	      No	      No
const	   Yes	   No	        No	      No	      No

-What is Good?
    let and const have block scope.
    let and const can not be redeclared.
    let and const must be declared before use.
    let and const does not bind to this.
    let and const are not hoisted.

-What is Not Good?
  var does not have to be declared.
  var is hoisted.
  var binds to this.    

-When to use JavaScript const?
      -Always declare a variable with const when you know that the value should not be changed.
      -Use const when you declare:
        A new Array
        A new Object
        A new Function
        A new RegExp

============================ Event ===================================
JavaScript Event Handlers

Event handlers can be used to handle and verify user input, user actions, and browser actions:

    Things that should be done every time a page loads
    Things that should be done when the page is closed
    Action that should be performed when a user clicks a button
    Content that should be verified when a user inputs data
    And more ...

Many different methods can be used to let JavaScript work with events:

    HTML event attributes can execute JavaScript code directly
    HTML event attributes can call JavaScript functions
    You can assign your own event handler functions to HTML elements
    You can prevent events from being sent or being handled
    And more ...
===============================================================